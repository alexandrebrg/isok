syntax = "proto3";

package isok.broker.rpc;

import "google/protobuf/timestamp.proto";

service Broker {
  /// Agents are expected to send batch of results to brokers,
  /// they should not send results individually. In case the broker
  /// isn't able to process the batch, it should return an error.
  /// In this case, the agent should send their batch to another broker,
  /// to prevent lag.
  rpc BatchSend(CheckBatchRequest) returns (CheckBatchResponse) {}
  /// Allows to check if the broker is healthy
  /// Agents will call this method with interval, to ensure
  /// checks have most chance to be sent.
  rpc Health(HealthRequest) returns (HealthResponse) {}
}


message CheckResult {
  string id_ulid = 1;

  google.protobuf.Timestamp run_at = 2;

  CheckJobStatus status = 3;
  CheckJobMetrics metrics = 4;
  Tags tags = 5;

  oneof details {
    JobDetailsTcp detail_tcp = 10;
    JobDetailsHttp details_http = 11;
  }
}

enum CheckJobStatus {
  Unknown = 0;
  Reachable = 1;
  Unreachable = 2;
  // Timeout is a special status that is used to indicate that a job has been
  // running for too long and has been killed. If this status is received, the
  // offloader should consider the job as failed, as it reached system protections.
  Timeout = 3;
}

message CheckJobMetrics {
  bool timeout = 1;
  optional uint64 latency = 2;
}

message JobDetailsTcp {}

message JobDetailsHttp {
  uint32 status_code = 1;
}

message Tags {
  string zone = 1;
  string region = 2;
  string agent_id = 3;
}

message CheckBatchRequest {
  Tags tags = 1;
  google.protobuf.Timestamp created_at = 2;

  repeated CheckResult events = 10;
}

message CheckBatchResponse {
  optional string error = 1;
}

message HealthRequest {}

message HealthResponse {
  bool healthy = 1;
}